/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { selectorFamily } from "recoil";
import { cosmWasmClient } from "./chain";
import { ExecuteMsg, Expiration, Timestamp, Uint64, CosmosMsgForEmpty, BankMsg, Uint128, StakingMsg, DistributionMsg, WasmMsg, Binary, Vote, Coin, Empty, Duration, Threshold, Decimal, InstantiateMsg, Voter, QueryMsg } from "./CW3Multisig.types";
import { CW3MultisigQueryClient } from "./CW3Multisig.client";
type QueryClientParams = {
  contractAddress: string;
};
export const queryClient = selectorFamily<CW3MultisigQueryClient, QueryClientParams>({
  key: "cW3MultisigQueryClient",
  get: ({
    contractAddress
  }) => ({
    get
  }) => {
    const client = get(cosmWasmClient);
    return new CW3MultisigQueryClient(client, contractAddress);
  }
});
export const thresholdSelector = selectorFamily<ThresholdResponse, QueryClientParams & {
  params: Parameters<CW3MultisigQueryClient["threshold"]>;
}>({
  key: "cW3MultisigThreshold",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.threshold(...params);
  }
});
export const proposalSelector = selectorFamily<ProposalResponse, QueryClientParams & {
  params: Parameters<CW3MultisigQueryClient["proposal"]>;
}>({
  key: "cW3MultisigProposal",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.proposal(...params);
  }
});
export const listProposalsSelector = selectorFamily<ListProposalsResponse, QueryClientParams & {
  params: Parameters<CW3MultisigQueryClient["listProposals"]>;
}>({
  key: "cW3MultisigListProposals",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.listProposals(...params);
  }
});
export const reverseProposalsSelector = selectorFamily<ReverseProposalsResponse, QueryClientParams & {
  params: Parameters<CW3MultisigQueryClient["reverseProposals"]>;
}>({
  key: "cW3MultisigReverseProposals",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.reverseProposals(...params);
  }
});
export const voteSelector = selectorFamily<VoteResponse, QueryClientParams & {
  params: Parameters<CW3MultisigQueryClient["vote"]>;
}>({
  key: "cW3MultisigVote",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.vote(...params);
  }
});
export const listVotesSelector = selectorFamily<ListVotesResponse, QueryClientParams & {
  params: Parameters<CW3MultisigQueryClient["listVotes"]>;
}>({
  key: "cW3MultisigListVotes",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.listVotes(...params);
  }
});
export const voterSelector = selectorFamily<VoterResponse, QueryClientParams & {
  params: Parameters<CW3MultisigQueryClient["voter"]>;
}>({
  key: "cW3MultisigVoter",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.voter(...params);
  }
});
export const listVotersSelector = selectorFamily<ListVotersResponse, QueryClientParams & {
  params: Parameters<CW3MultisigQueryClient["listVoters"]>;
}>({
  key: "cW3MultisigListVoters",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.listVoters(...params);
  }
});